/*
 소인수분해 11653
 */

#include <iostream>

using namespace std;

int main(){
    int n;
    cin >> n;

    for(int i=2; i*i<=n; i++){ // i^n(n제곱)을 약수로 가질 때 최대 i값은 루트n.
        while(n%i == 0){ // n이 i로 나눠지지 않을 때까지 나누기 i를 반복
            cout << i << "\n"; // 나눌 때의 i를 출력
            n = n/i;
        }
    }
    
    if(n > 1) // n > 1 이면 루트n보다 큰 약수. 그 수 자체는 소수임이 확실하다(왜?).
        cout << n;
    
    return 0;
}

/*
 합성수는 소수의 곱으로 나타낼 수 있다.
 나눌 때 사용할 소수를 미리 구하지 않아도 된다.
   <- 소수가 아닌 수는 해당 수보다 작은 소수들에 의해 나눠지므로
     (소수가 아닌 수들이 약수이더라도 앞부분 순회에서 크기가 더 작은 소수에 의하여 이미 나눠진 뒤이다)
      => 제수를 나눌 수 없음이 확실하다.
 i^n(소수 i의n제곱)을 약수로 가질 때 최대 i값은 루트n
 i로 나눠지지 않을 때까지 나눈다.
 */
